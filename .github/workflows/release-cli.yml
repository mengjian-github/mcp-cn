name: CLI Release

on:
  push:
    branches:
      - main
    paths:
      - "packages/cli/**"
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  CI: true

jobs:
  release:
    name: Release CLI
    runs-on: ubuntu-latest
    if: github.repository == 'mengjian-github/mcp-cn'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CLI package
        run: pnpm --filter @mcp_hub_org/cli build

      - name: Get current version and bump
        id: version
        run: |
          cd packages/cli

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Determine release type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Auto patch for push events
            RELEASE_TYPE="patch"
          fi

          echo "Release type: $RELEASE_TYPE"

          # Create version update script
          cat > update_version.js << 'EOF'
          const fs = require('fs');
          const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
          const [major, minor, patch] = pkg.version.split('.').map(Number);
          const releaseType = process.argv[2];

          let newVersion;
          switch(releaseType) {
            case 'major':
              newVersion = `${major + 1}.0.0`;
              break;
            case 'minor':
              newVersion = `${major}.${minor + 1}.0`;
              break;
            case 'patch':
            default:
              newVersion = `${major}.${minor}.${patch + 1}`;
              break;
          }

          pkg.version = newVersion;
          fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          console.log(newVersion);
          EOF

          # Run version update
          NEW_VERSION=$(node update_version.js $RELEASE_TYPE)
          rm update_version.js

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/cli/package.json
          git commit -m "chore(cli): bump version to ${{ steps.version.outputs.NEW_VERSION }}"
          git push

      - name: Build and Publish to NPM
        run: |
          cd packages/cli
          pnpm build
          pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ steps.version.outputs.NEW_VERSION }}
          release_name: CLI v${{ steps.version.outputs.NEW_VERSION }}
          body: |
            ## 🎉 CLI Package Release

            ### 📦 Version: ${{ steps.version.outputs.NEW_VERSION }}

            ### 💿 Installation
            ```bash
            npm install -g @mcp_hub_org/cli@${{ steps.version.outputs.NEW_VERSION }}
            # or
            npx @mcp_hub_org/cli
            ```

            ### 🚀 Usage
            ```bash
            mcp list          # 列出所有可用的 MCP 服务器
            mcp install <server-name>  # 安装 MCP 服务器
            mcp installed     # 查看已安装的服务器
            mcp uninstall <server-name>  # 卸载服务器
            ```

            ### 🔗 Links
            - [NPM Package](https://www.npmjs.com/package/@mcp_hub_org/cli)
            - [GitHub Repository](https://github.com/mengjian-github/mcp-cn)
            - [Documentation](https://mcp-cn.com)

            ### 📋 Changes
            This release includes the latest changes from the main branch.
          draft: false
          prerelease: false

      - name: Summary
        if: always()
        run: |
          echo "## 🎯 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Auto Release**: Published CLI package automatically" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Version**: ${{ steps.version.outputs.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🔄 **Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔄 **Release Type**: patch (auto)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **NPM Package**: https://www.npmjs.com/package/@mcp_hub_org/cli" >> $GITHUB_STEP_SUMMARY
