name: CLI Release

on:
  push:
    branches:
      - main
    paths:
      - "packages/cli/**"
      - ".changeset/**"
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - "patch"
          - "minor"
          - "major"
          - "prerelease"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

env:
  CI: true

jobs:
  release:
    name: Release CLI
    runs-on: ubuntu-latest
    if: github.repository == 'mengjian-github/mcp-cn'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build CLI package
        run: pnpm --filter @mcp_hub_org/cli build

      - name: Check for changesets
        id: check-changesets
        run: |
          if [ -n "$(find .changeset -name '*.md' -not -name 'README.md' | head -1)" ]; then
            echo "has-changesets=true" >> $GITHUB_OUTPUT
            echo "Found changeset files, will use changeset for version management"
          else
            echo "has-changesets=false" >> $GITHUB_OUTPUT
            echo "No changeset files found"
          fi

      - name: Release with Changesets
        if: steps.check-changesets.outputs.has-changesets == 'true'
        id: changesets
        uses: changesets/action@v1
        with:
          title: "Release: CLI Package Update"
          commit: "Release CLI package"
          version: pnpm run version
          publish: pnpm run release:cli
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Manual version bump
        if: github.event_name == 'workflow_dispatch' && steps.check-changesets.outputs.has-changesets == 'false'
        id: manual-version
        run: |
          cd packages/cli

          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Bump version based on release type
          case "${{ github.event.inputs.release_type }}" in
            "patch")
              pnpm version patch --no-git-tag-version
              ;;
            "minor")
              pnpm version minor --no-git-tag-version
              ;;
            "major")
              pnpm version major --no-git-tag-version
              ;;
            "prerelease")
              pnpm version prerelease --no-git-tag-version --preid=beta
              ;;
          esac

          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit manual version bump
        if: github.event_name == 'workflow_dispatch' && steps.check-changesets.outputs.has-changesets == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/cli/package.json
          git commit -m "chore(cli): release version ${{ steps.manual-version.outputs.NEW_VERSION }}"
          git push

      - name: Publish to NPM (manual release)
        if: github.event_name == 'workflow_dispatch' && steps.check-changesets.outputs.has-changesets == 'false'
        run: |
          cd packages/cli
          pnpm build
          pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get published version
        id: get-version
        run: |
          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            VERSION=$(echo '${{ steps.changesets.outputs.publishedPackages }}' | jq -r '.[0].version')
          else
            VERSION="${{ steps.manual-version.outputs.NEW_VERSION }}"
          fi
          echo "RELEASED_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"

      - name: Create GitHub Release
        if: steps.changesets.outputs.published == 'true' || (github.event_name == 'workflow_dispatch' && steps.check-changesets.outputs.has-changesets == 'false')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: cli-v${{ steps.get-version.outputs.RELEASED_VERSION }}
          release_name: CLI v${{ steps.get-version.outputs.RELEASED_VERSION }}
          body: |
            ## 🎉 CLI Package Release

            ### 📦 Version: ${{ steps.get-version.outputs.RELEASED_VERSION }}

            ### 💿 Installation
            ```bash
            npm install -g @mcp_hub_org/cli@${{ steps.get-version.outputs.RELEASED_VERSION }}
            # or
            npx @mcp_hub_org/cli
            ```

            ### 🚀 Usage
            ```bash
            mcp list          # 列出所有可用的 MCP 服务器
            mcp install <server-name>  # 安装 MCP 服务器
            mcp installed     # 查看已安装的服务器
            mcp uninstall <server-name>  # 卸载服务器
            ```

            ### 🔗 Links
            - [NPM Package](https://www.npmjs.com/package/@mcp_hub_org/cli)
            - [GitHub Repository](https://github.com/mengjian-github/mcp-cn)
            - [Documentation](https://mcp-cn.com)
          draft: false
          prerelease: ${{ contains(steps.get-version.outputs.RELEASED_VERSION, 'beta') }}

      - name: Summary
        if: always()
        run: |
          echo "## 🎯 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.changesets.outputs.published }}" == "true" ]; then
            echo "✅ **Changeset Release**: Published via changesets" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Published Packages**: ${{ steps.changesets.outputs.publishedPackages }}" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "✅ **Manual Release**: Published via workflow dispatch" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Version**: ${{ steps.manual-version.outputs.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "🔄 **Release Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ **Build Only**: No release performed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **NPM Package**: https://www.npmjs.com/package/@mcp_hub_org/cli" >> $GITHUB_STEP_SUMMARY
